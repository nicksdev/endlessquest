
TODO:

//Handle exceptions for taking from containers
//look (at, in, etc) - looks inside, searches etc. E.g. search dead mobs, look in chest
//have objects that cannot be picked up
//make all armour type armour and add a slot for its location.
//add inventory check function which checks the item is present in inventory
//add ability to use an item
//on 'equip' check use = equip
//usable items, e.g. potion of healing, door key
//allow the user to choose an action when in combat (defaulting to attack at the moment). Could be use, flee, etc
//Customise Name
//create profile on init from template.
//Allow to save game and load up again
//magic: mana, spells, etc
//check class when equipping stuff
//XP and levelup function
//add level requirement to equiping
//character creation
//classes: fighter, priest, wizard

fix 'use' so that it call applyEffect()

//add effects, i.e. poisen over time or temp stat boosts
mass effect spells
spell scrolls
container traps function
//out of combat casting
Searchable corpses, levelled lists loot
have a max health check (check template) that should be a limit for heals
persistant bonuses from equipped items (e.g. sword of +2 strength or dagger of +5 damage)
//introduce concept of turns (both in and out of combat)
magic levels and multiplyers (e.g. 3rd level firebolt with a 1.5 multiplyer = 1st level dam * 1.5 * 1.5 i.e. 10x1.5=15*1.5=22.5)




ASSUMPTIONS:
- only unique items have charges




Fixup UI

    character console
        - include spells on cooldown


VERSION 2: Angular 4 + typescript

Lambda



COMBAT LOGIC:


Enter room
if room has mobs combatInit()
       combatFlag set to on
       set combatObj, monstorArray and mobTarget variables
       generate mobs from templates
       call selectTarget()
            prompts user to attack a mob -
            whan 'attack' command input calls attackRound() e.g. attack <mob number>
                attackRound() (char hit and damage logic)
                    if does damage, call mobHealthCheck
                        if mob dead, process
                            if all mobs dead, victory
                    mobRound() (mob hit and damage logic)
                        if dead, end combat, defeat
                        call selectTarget()


        combatFlag switches between combat and non-combat input functions.
        merge 'cast' and combatFlag can be removed














